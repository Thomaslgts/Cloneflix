{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/Cloneflix/src/components/Discover/discover.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getDiscoverMovie } from \"../../store/film/discoverSlice\";\nimport { getDiscoverTV } from \"../../store/serie/discoverSlice\";\nimport './discover.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Discover() {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    discoverFilm\n  } = useSelector(state => state);\n  const {\n    discoverTV\n  } = useSelector(state => state);\n  const [stateDiscoverFilm, setDiscoverFilm] = useState([]);\n  const [stateDiscoverTV, setDiscoverTV] = useState([]);\n  const [allType, setAllType] = useState([]);\n  const imgUrl = \"https://image.tmdb.org/t/p/w500\";\n  useEffect(() => {\n    dispatch(getDiscoverMovie());\n    dispatch(getDiscoverTV());\n  }, []);\n  useEffect(() => {\n    if (discoverFilm.isSuccess & discoverTV.isSuccess) {\n      setDiscoverFilm(discoverFilm.data.results);\n      setDiscoverTV(discoverTV.data.results);\n      const concat = [].concat(discoverTV, discoverFilm);\n      setAllType(concat);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"discoverContainer\",\n    children: allType.map((e, i) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: e.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: imgUrl + e.poster_path,\n          alt: \"Movie Poster\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}\n_s(Discover, \"oV9zPbOyPXH9PLfSKxmkcCdfrMU=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = Discover;\nexport default Discover;\nvar _c;\n$RefreshReg$(_c, \"Discover\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","getDiscoverMovie","getDiscoverTV","Discover","dispatch","discoverFilm","state","discoverTV","stateDiscoverFilm","setDiscoverFilm","stateDiscoverTV","setDiscoverTV","allType","setAllType","imgUrl","isSuccess","data","results","concat","map","e","i","title","poster_path"],"sources":["/Applications/MAMP/htdocs/Cloneflix/src/components/Discover/discover.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getDiscoverMovie } from \"../../store/film/discoverSlice\";\nimport { getDiscoverTV } from \"../../store/serie/discoverSlice\";\nimport './discover.css';\n\nfunction Discover() {\n    const dispatch = useDispatch();\n    const { discoverFilm } = useSelector((state) => state);\n    const { discoverTV } = useSelector((state) => state);\n    const [stateDiscoverFilm, setDiscoverFilm] = useState([]);\n    const [stateDiscoverTV, setDiscoverTV] = useState([]);\n    const [allType, setAllType] = useState([])\n    const imgUrl = \"https://image.tmdb.org/t/p/w500\";\n\n    useEffect(() => {\n        dispatch(getDiscoverMovie());\n        dispatch(getDiscoverTV());\n    }, [])\n\n    useEffect(() => {\n        if (discoverFilm.isSuccess & discoverTV.isSuccess) {\n            setDiscoverFilm(discoverFilm.data.results);\n            setDiscoverTV(discoverTV.data.results)\n            const concat = [].concat(discoverTV, discoverFilm)\n            setAllType(concat);\n        }\n    }, [])\n\n    return (\n        <div className=\"discoverContainer\">\n            {allType.map((e, i) => {\n                return (\n                    <div key={i}>\n                        <h2>{e.title}</h2>\n                        <img src={imgUrl + e.poster_path} alt=\"Movie Poster\" />\n                    </div>\n                )\n            })}\n        </div >\n    )\n}\n\nexport default Discover"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,gBAAgB,QAAQ,gCAAgC;AACjE,SAASC,aAAa,QAAQ,iCAAiC;AAC/D,OAAO,gBAAgB;AAAC;AAExB,SAASC,QAAQ,GAAG;EAAA;EAChB,MAAMC,QAAQ,GAAGL,WAAW,EAAE;EAC9B,MAAM;IAAEM;EAAa,CAAC,GAAGL,WAAW,CAAEM,KAAK,IAAKA,KAAK,CAAC;EACtD,MAAM;IAAEC;EAAW,CAAC,GAAGP,WAAW,CAAEM,KAAK,IAAKA,KAAK,CAAC;EACpD,MAAM,CAACE,iBAAiB,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACzD,MAAM,CAACY,eAAe,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACrD,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAMgB,MAAM,GAAG,iCAAiC;EAEhDjB,SAAS,CAAC,MAAM;IACZO,QAAQ,CAACH,gBAAgB,EAAE,CAAC;IAC5BG,QAAQ,CAACF,aAAa,EAAE,CAAC;EAC7B,CAAC,EAAE,EAAE,CAAC;EAENL,SAAS,CAAC,MAAM;IACZ,IAAIQ,YAAY,CAACU,SAAS,GAAGR,UAAU,CAACQ,SAAS,EAAE;MAC/CN,eAAe,CAACJ,YAAY,CAACW,IAAI,CAACC,OAAO,CAAC;MAC1CN,aAAa,CAACJ,UAAU,CAACS,IAAI,CAACC,OAAO,CAAC;MACtC,MAAMC,MAAM,GAAG,EAAE,CAACA,MAAM,CAACX,UAAU,EAAEF,YAAY,CAAC;MAClDQ,UAAU,CAACK,MAAM,CAAC;IACtB;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI;IAAK,SAAS,EAAC,mBAAmB;IAAA,UAC7BN,OAAO,CAACO,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MACnB,oBACI;QAAA,wBACI;UAAA,UAAKD,CAAC,CAACE;QAAK;UAAA;UAAA;UAAA;QAAA,QAAM,eAClB;UAAK,GAAG,EAAER,MAAM,GAAGM,CAAC,CAACG,WAAY;UAAC,GAAG,EAAC;QAAc;UAAA;UAAA;UAAA;QAAA,QAAG;MAAA,GAFjDF,CAAC;QAAA;QAAA;QAAA;MAAA,QAGL;IAEd,CAAC;EAAC;IAAA;IAAA;IAAA;EAAA,QACC;AAEf;AAAC,GAnCQlB,QAAQ;EAAA,QACIJ,WAAW,EACHC,WAAW,EACbA,WAAW;AAAA;AAAA,KAH7BG,QAAQ;AAqCjB,eAAeA,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module"}