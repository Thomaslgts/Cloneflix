{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/Cloneflix/src/components/ListFilm/listFilm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport './listFilm.css';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getDiscoverMovie } from \"../../store/film/discoverSlice\";\nimport { getFilter } from \"../../API/getFilter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ListFilm() {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    discoverFilm\n  } = useSelector(state => state);\n  const {\n    genre\n  } = useSelector(state => state);\n  const [stateDiscoverFilm, setDiscoverFilm] = useState([]);\n  const [stateFilter, setFilter] = useState([]);\n  const imgUrl = \"https://image.tmdb.org/t/p/w500\";\n  const [Checked, setChecked] = useState([]);\n\n  // Dispatch Movie et Serie\n  useEffect(() => {\n    dispatch(getDiscoverMovie());\n    dispatch(getFilter());\n  }, []);\n\n  // On vérifie que les données de l'API on été transmise\n  useEffect(() => {\n    if (discoverFilm.isSuccess) {\n      setDiscoverFilm(discoverFilm.data.results);\n    }\n  }, [discoverFilm]);\n  useEffect(() => {\n    if (genre.isSuccess) {\n      setFilter(genre.data.genres);\n      console.log(discoverFilm);\n    }\n  }, [genre]);\n\n  //Configuration des checkbox Filtre\n\n  const handleChange = value => {\n    const currentIndex = Checked.indexOf(value);\n    const newChecked = [...Checked];\n    console.log(newChecked);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"discoverContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"FilterBox\",\n      children: stateFilter.map((e, i) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: e.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: true,\n            onChange: handleChange(e.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"film\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"DiscoverFilm\",\n        children: stateDiscoverFilm.map((e, i) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"DiscoverCard\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: e.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: imgUrl + e.poster_path,\n              alt: \"Movie Poster\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: e.overview\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 33\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n_s(ListFilm, \"Djk95PRSyilrMrnSzjpBKHXcGwQ=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = ListFilm;\nexport default ListFilm;\nvar _c;\n$RefreshReg$(_c, \"ListFilm\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","getDiscoverMovie","getFilter","ListFilm","dispatch","discoverFilm","state","genre","stateDiscoverFilm","setDiscoverFilm","stateFilter","setFilter","imgUrl","Checked","setChecked","isSuccess","data","results","genres","console","log","handleChange","value","currentIndex","indexOf","newChecked","map","e","i","name","id","title","poster_path","overview"],"sources":["/Applications/MAMP/htdocs/Cloneflix/src/components/ListFilm/listFilm.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './listFilm.css'\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getDiscoverMovie } from \"../../store/film/discoverSlice\";\nimport { getFilter } from \"../../API/getFilter\";\n\nfunction ListFilm() {\n    const dispatch = useDispatch();\n    const { discoverFilm } = useSelector((state) => state)\n    const { genre } = useSelector((state) => state);\n    const [stateDiscoverFilm, setDiscoverFilm] = useState([]);\n    const [stateFilter, setFilter] = useState([]);\n    const imgUrl = \"https://image.tmdb.org/t/p/w500\";\n    const [Checked, setChecked] = useState([]);\n\n    // Dispatch Movie et Serie\n    useEffect(() => {\n        dispatch(getDiscoverMovie())\n        dispatch(getFilter())\n    }, []);\n\n    // On vérifie que les données de l'API on été transmise\n    useEffect(() => {\n        if (discoverFilm.isSuccess) {\n            setDiscoverFilm(discoverFilm.data.results)\n        }\n    }, [discoverFilm])\n\n    useEffect(() => {\n        if (genre.isSuccess) {\n            setFilter(genre.data.genres)\n            console.log(discoverFilm)\n        }\n    }, [genre])\n\n    //Configuration des checkbox Filtre\n\n    const handleChange = (value) => {\n        const currentIndex = Checked.indexOf(value);\n        const newChecked = [...Checked];\n        console.log(newChecked);\n    }\n\n    return (\n        <div className=\"discoverContainer\">\n            <div className=\"FilterBox\">\n                {stateFilter.map((e, i) => {\n                    return (\n                        <div key={i}>\n                            <label>{e.name}</label>\n                            <input type=\"checkbox\" checked onChange={handleChange(e.id)} />\n                        </div>\n                    )\n                })}\n            </div>\n            <h1>film</h1>\n            <a href=\"\">\n                <div className=\"DiscoverFilm\" >\n                    {stateDiscoverFilm.map((e, i) => {\n                        return (\n                            <div key={i} className=\"DiscoverCard\">\n                                <h2>{e.title}</h2>\n                                <img src={imgUrl + e.poster_path} alt=\"Movie Poster\" />\n                                <p>{e.overview}</p>\n                            </div>\n                        )\n                    })}\n                </div >\n            </a>\n        </div>\n    )\n}\n\nexport default ListFilm\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}